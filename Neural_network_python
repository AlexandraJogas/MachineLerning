# Classifier flower Iris for 4 features: Petal_length, Petal_width, Sepal_length, Sepal_width
# Y_Class=['Setosa', 'Versicolor','Virginica']
# X_Column=[Petal_length, Petal_width, Sepal_length, Sepal_width]
# h=F(xW+b) ,  x=[x1 x2], W=[w11 w12 w13, w21 w22 w23], b=[b1 b2 b3]
# h1=F(x1w11+x2w21+b1), h2=F(x1w12+x2w22+b2), h3=F(x1w13+x2w23+b3)
# h=F(xW+b) --> t=xW+b, h=F(t)
# input layer:  4 neurons  ( X_Colum: Petal_length, Petal_width, Sepal_length, Sepal_widthn)
# 1 layer:      5 neurons  ( we choose ourselves)
# output layer: 3 neurons  ( Y_Class, last layer equal to number predict classes: 'Setosa', 'Versicolor','Virginica')
# t1=xw1+b1                (layer1, h,b,w-vectors,  vector x--> w1+b1 -->t1 neuron)
# h1=F(t1)                 (layer1, h,b,w-vectors)
# t2=h1w2+b2               (layer2, h,b,w-vectors,  neuron h1-->w2+b1 -->t2 neuron, not need activation function h2=F(t2) because is last layer)
# z=Softmax(t2)=S(t2)      (vector probabilities:  S(t)=e^ti/sum(e^ti) )
# F(t)=ReLu(t)=max(o,t)    (non-linear activation function)

import numpy as np

input_dim = 4  (number of input  x)
out_dim   = 3  (number of output y)
h_dim     = 10 (number neurons in layer1)


